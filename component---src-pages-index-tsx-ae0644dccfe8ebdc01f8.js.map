{"version":3,"sources":["webpack:///./src/components/seo.tsx","webpack:///./src/components/listing.tsx","webpack:///./src/pages/index.tsx"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","ArticleLayout","styled","main","Listing","allMarkdownRemark","edges","map","edge","key","node","slug","to","frontmatter","className","excerpt","IndexPage"],"mappings":"2FAAA,iDAgFeA,IA9DH,SAAC,GAA8C,IAA5CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAC9BC,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACE,kBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKG,aAAaJ,MACzCD,KAAM,CACJ,CACEQ,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAASR,GAEX,CACES,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAM,gBACNC,QAASR,GAEX,CACEO,KAAM,sBACNC,QAASL,IAEXQ,OAAOZ,GAAQ,Q,sGCvEjBa,E,UAAgBC,EAAOC,KAAV,4EAAGD,CAAH,wBA+BJE,EA3BC,WAgBd,OAfab,yBAAe,cAehBc,kBAAkBC,MAAMC,KAAI,SAAAC,GAAI,OAC1C,kBAACP,EAAD,CAAeQ,IAAKD,EAAKE,KAAKC,MAC5B,kBAAC,OAAD,CAAMC,GAAE,UAAYJ,EAAKE,KAAKG,YAAYF,MACxC,wBAAIG,UAAU,QAAQN,EAAKE,KAAKG,YAAYxB,QAE9C,2BAAImB,EAAKE,KAAKK,SACd,kBAAC,OAAD,CAAMH,GAAE,UAAYJ,EAAKE,KAAKG,YAAYF,MAA1C,kBCfSK,UATG,WAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK3B,MAAM,SACX,kBAAC,EAAD","file":"component---src-pages-index-tsx-ae0644dccfe8ebdc01f8.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface Props {\n  description?: string;\n  lang?: string;\n  meta?: [];\n  title: string;\n}\n\nconst SEO = ({ description, lang, meta, title }: Props) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta || [])}\n    />\n  );\n};\n\nexport default SEO;\n","import React from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport styled from 'styled-components';\n\nconst ArticleLayout = styled.main`\n  margin-bottom: 5vh;\n`;\n\nconst Listing = () => {\n  const data = useStaticQuery(graphql`\n    query ListingQuery {\n      allMarkdownRemark(limit: 5, sort: { fields: [frontmatter___date] }) {\n        edges {\n          node {\n            excerpt\n            frontmatter {\n              title\n              slug\n            }\n          }\n        }\n      }\n    }\n  `);\n  return data.allMarkdownRemark.edges.map(edge => (\n    <ArticleLayout key={edge.node.slug}>\n      <Link to={`/posts/${edge.node.frontmatter.slug}`}>\n        <h2 className=\"neon\">{edge.node.frontmatter.title}</h2>\n      </Link>\n      <p>{edge.node.excerpt}</p>\n      <Link to={`/posts/${edge.node.frontmatter.slug}`}>Read More</Link>\n    </ArticleLayout>\n  ));\n};\n\nexport default Listing;\n","import React from 'react';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Listing from '../components/listing';\n\nconst IndexPage = () => {\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Listing />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}